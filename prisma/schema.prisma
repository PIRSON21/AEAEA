// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  login    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  number   Int
  title    String
  imageUrl String
  objects  StoryObject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoryObject {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Story   Story?  @relation(fields: [storyId], references: [id])
  storyId String? @db.ObjectId
}

model Trend {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  number   Int
  title    String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  number   Int
  title    String
  imageUrl String

  description String?
  effects     String?
  height      String?
  time        String?

  gallery Gallery[]
  events  Event[]
  type    Filters[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gallery {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?  @db.ObjectId
}

model Event {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Service   Service @relation(fields: [serviceId], references: [id])
  serviceId String  @db.ObjectId
}

model Filters {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  items FilterItems[]
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?  @db.ObjectId
}

model FilterItems {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Filters   Filters? @relation(fields: [filtersId], references: [id])
  filtersId String?  @db.ObjectId
}
